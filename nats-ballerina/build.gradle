/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Nats Ballerina Generator'

def packageName = "nats"
def packageOrg = "ballerinax"
def tomlVersion = project.version.replace("-SNAPSHOT", "")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def artifactCodeCoverageReport = file("$project.projectDir/target/cache/tests_cache/coverage/ballerina.exec")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def originalConfig = ballerinaConfigFile.text
def originalDependencies = ballerinaDependencyFile.text
def distributionBinPath = project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"

configurations {
    jbalTools
    externalJars
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(":${packageName}-native")
    externalJars (group: 'io.nats', name: 'jnats', version: "${natsVersion}") {
        transitive = false
    }
}

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

task updateTomlVersions {
    def stdlibDependentCryptoVersion = project.stdlibCryptoVersion.replace("-SNAPSHOT", "")
    def stdlibDependentLogVersion = project.stdlibLogVersion.replace("-SNAPSHOT", "")
    def natsClientVersion = project.natsVersion

    def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
    newConfig = newConfig.replace("@toml.version@", tomlVersion)
    newConfig = newConfig.replace("@nats.client.version@", natsClientVersion)
    ballerinaConfigFile.text = newConfig

    def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.log.version@", stdlibDependentLogVersion)
    newDependencyConfig = newDependencyConfig.replace("@stdlib.crypto.version@", stdlibDependentCryptoVersion)
    ballerinaDependencyFile.text = newDependencyConfig
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencies
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""
def testParams = ""

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:build")) {
            ballerinaTest.enabled = false
        } else {
            ballerinaTest.enabled = true
        }

        if (graph.hasTask(":${packageName}-ballerina:test")) {
            testParams = "--code-coverage --includes=*"
        } else {
            testParams = "--skip-tests"
        }

        if (graph.hasTask(":${packageName}-ballerina:publish") || graph.hasTask(":${packageName}-ballerina:publishToMavenLocal")) {
            ballerinaPublish.enabled = true
            ballerinaTest.enabled = false
        } else {
            ballerinaPublish.enabled = false
        }
    }
}

task ballerinaTest {
    dependsOn(copyStdlibs)
    dependsOn(":nats-native:build")
    dependsOn(updateTomlVersions)
    finalizedBy(revertTomlFile)

    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat test " +
                        "--code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams} && " +
                        "exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal test " +
                        "--code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams}"
            }
        }
    }
}

test {
    dependsOn(ballerinaTest)
}

task startNatsServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=my-nats"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("my-nats")) {
                println "Starting NATS Basic server."
                exec {
                    commandLine 'sh', '-c', "docker run --rm -d --name my-nats -p 4222:4222 nats:latest"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(5 * 1000)
            } else {
                println "NATS Basic server is already started."
            }
        }
    }
}

task stopNatsServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=my-nats"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("my-nats")) {
                println "Stopping NATS server."
                exec {
                    commandLine 'sh', '-c', "docker stop my-nats"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(5 * 1000)
            } else {
                println "NATS server is not started."
            }
        }
    }
}

task ballerinaBuild {
    dependsOn(":nats-native:build")
    dependsOn(initializeVariables)
    inputs.dir file(project.projectDir)
    finalizedBy(revertTomlFile)

    doLast {

        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat build ${testParams} ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal build ${testParams} ${debugParams}"
            }
        }
        copy {
            from file("$project.projectDir/target/bala")
            into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
            artifact source: artifactCodeCoverageReport, classifier: 'jacoco'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/aashikam/publishing_stdlibs")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

task ballerinaPublish {
    // Pushing module to Ballerina central
    doLast {
        if (ballerinaCentralAccessToken != null) {
            println("Publishing to the ballerina central...")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push"
                }
            }
        } else {
            println("Central Access Token is Not Present")
        }
    }
}

unpackJballerinaTools.dependsOn copyToLib
unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
updateTomlVersions.dependsOn copyStdlibs
ballerinaBuild.dependsOn updateTomlVersions
ballerinaBuild.dependsOn test
ballerinaBuild.dependsOn startNatsServer
ballerinaBuild.finalizedBy stopNatsServer
ballerinaTest.dependsOn startNatsServer
ballerinaTest.finalizedBy stopNatsServer
build.dependsOn ballerinaBuild
ballerinaPublish.dependsOn ballerinaBuild
publish.dependsOn ballerinaPublish
ballerinaPublish.dependsOn updateTomlVersions
ballerinaPublish.dependsOn initializeVariables
ballerinaPublish.finalizedBy revertTomlFile
